import static java.lang.Runtime.runtime

plugins {
    id 'application'
    id 'jacoco'
    alias(libs.plugins.shadow)
    alias(libs.plugins.spotbugs)
    alias(libs.plugins.lombok)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += '-parameters'
}

repositories {
    mavenCentral()
}

final LATEST = 'latest.release'

dependencies {
    implementation(libs.slf4j)
    runtimeOnly(libs.logback)
    {%- if cookiecutter.jansi == "yes" %}
    implementation(libs.jansi)
    {%- endif %}
    testImplementation "org.junit.jupiter:junit-jupiter-api:$LATEST"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$LATEST"
    testImplementation(libs.assertj)
    testImplementation(libs.mockito)
    {%- if cookiecutter.jqwik == "yes" %}
    testImplementation(libs.jqwik)
    {%- endif %}

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

application {
    mainClass = '{{cookiecutter.package}}.Application'
}

test {
    useJUnitPlatform()

    maxParallelForks = runtime.availableProcessors().intdiv(2) ?: 1

    systemProperty(
        'junit.jupiter.displayname.generator.default',
        'org.junit.jupiter.api.DisplayNameGenerator$ReplaceUnderscores')
    systemProperty('junit.jupiter.execution.parallel.enabled', true)
    systemProperty('junit.jupiter.execution.parallel.mode.default', 'concurrent')
    {%- if cookiecutter.jqwik == "yes" %}
    systemProperty('jqwik.database', "${buildDir}/jqwik.db")
    systemProperty('jqwik.seeds.whenfixed', 'WARN')
    systemProperty('jqwik.reporting.usejunitplatform', true)
    {%- endif %}
}

check.dependsOn(jacocoTestReport)
